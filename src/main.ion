const
    range = (n) -> [i for let i = 0; i < n; i++]
    enableBit(n, i) -> n | (1 << i)
    disableBit(n, i) -> n & ~(1 << i)
    setBit(n, i, value) -> value is 0 ? disableBit(n, i) : enableBit(n, i)
    bitMask(n) -> ~((~0) << n)
    bitCount(n) ->
        let m = n - ((n >> 1) & 0x55555555)
        m = (m & 0x33333333) + ((m >> 2) & 0x33333333)
        return ((m + (m >> 4) & 0xF0F0F0F) * 0x1010101) >> 24
    leastSignificantBit(n) ->
        for let i = 0; i < 32; i++
            if ((n >> i) & 1) is 1
                return i
    allBits(n) ->
        return []
            for let i = 0; i < 32; i++
                if ((n >> i) & 1) is 1
                    i

export class Board
    constructor: (blockWidth) ->
        @blockWidth = blockWidth
        @boardWidth = blockWidth * blockWidth
        @fullDomain = bitMask(@boardWidth)
        @area = @boardWidth * @boardWidth
        @netDomainSize = @area * @boardWidth
        @cells = [@fullDomain for i in range(@area)]
        @undoStack = []

    properties:
        pushUndo: (undo) ->
            @undoStack.push(undo)
        startUndoGroup: ->
            @undoStack.push(null)
        undoGroup: ->
            while true
                let undo = @undoStack.pop()
                if undo?
                    let [x, y, value] = undo
                    @set(x, y, value, true)
                else
                    return

        cellIndex: (x, y) -> y * @boardWidth + x
        cellCord: (i) ->
            let x = i % @boardWidth
            let y = (i - x) / @boardWidth
            return [x, y]
        get: (x, y) -> @cells[@cellIndex(x, y)]
        set: (x, y, value, undo = false) ->
            let cell = @get(x, y)
            let preDomainSize = bitCount(cell)
            let postDomainSize = bitCount(value)
            @netDomainSize += postDomainSize - preDomainSize
            if not undo
                @pushUndo([x, y, cell])
            @cells[@cellIndex(x, y)] = value

        removeDomain: (x, y, value) ->
            let cell = @get(x, y)
            let preNetDomainSize = @netDomainSize
            cell = disableBit(cell, value)
            @set(x, y, cell)
            let domainSize = bitCount(cell)
            if domainSize is 0
                return false
            else if domainSize is 1 and preNetDomainSize > @netDomainSize
                let singleValue = leastSignificantBit(cell)
                return @setAndUpdate(x, y, singleValue)
            else
                return true
        minCord: ->
            let mini = 0
            let min = Infinity
            for i in range(@area)
                let curr = bitCount(@cells[i])
                if curr > 1 and curr < min
                    min = curr
                    mini = i
            return @cellCord(mini)
        setAndUpdate: (x, y, value) ->
            @set(x, y, 1 << value)
            # Row
            for xi in range(@boardWidth)
                if xi isnt x
                    if not @removeDomain(xi, y, value)
                        return false
            # Column
            for yi in range(@boardWidth)
                if yi isnt y
                    if not @removeDomain(x, yi, value)
                        return false
            # Block
            let blockX = x - (x % @blockWidth)
            let blockY = y - (y % @blockWidth)
            for dx in range(@blockWidth)
                for dy in range(@blockWidth)
                    let xi = blockX + dx
                    let yi = blockY + dy
                    if xi isnt x and yi isnt y
                        if not @removeDomain(xi, yi, value)
                            return false
            return true
        solve: ->
            let [x, y] = @minCord()
            let cell = @get(x, y)
            let domain = allBits(cell)
            for value in domain
                @startUndoGroup()
                if @setAndUpdate(x, y, value)
                    if (@netDomainSize is @area) or @solve()
                        return true
                @undoGroup()
            return false

        displayValue: (x, y, showDomainSize) ->
            let cell = @get(x, y)
            if showDomainSize
                return bitCount(cell)
            else
                if bitCount(cell) is 1
                    return leastSignificantBit(cell) + 1
                else
                    return '-'
        print: (showDomainSize = false) ->
            for y in range(@boardWidth)
                if (y % @blockWidth) is 0 and y isnt 0
                    console.log(..)
                        [' ' for i in range(@boardWidth + @blockWidth - 1)].join(' ')
                let row = []
                    for x in range(@boardWidth)
                        if (x % @blockWidth) is 0 and x isnt 0
                            ' '
                        @displayValue(x, y, showDomainSize)
                console.log(row.join(' '))

    parse: (boardString) ->
        let cells = []
            for line in boardString.split('\n')
                for cell in line.split(' ')
                    cell
        let boardWidth = Math.sqrt(cells.length)
        let blockWidth = Math.sqrt(boardWidth)
        let board = new Board(blockWidth)
        for cellStr, i in cells
            let cell = parseInt(cellStr)
            if isNaN(cell)
                continue
            let [x, y] = board.cellCord(i)
            board.setAndUpdate(x, y, cell - 1)
        return board

    test: ->
        console.time('solved')
        let board = Board.parse(..)
            ""
                - - - 7 - - - - -
                1 - - - - - - - -
                - - - 4 3 - 2 - -
                - - - - - - - - 6
                - - - 5 - 9 - - -
                - - - - - - 4 1 8
                - - - - 8 1 - - -
                - - 2 - - - - 5 -
                - 4 - - - - 3 - -
        let solved = board.solve()
        console.timeEnd('solved')
        if solved
            console.log()
            console.log('Solution: ')
            board.print()